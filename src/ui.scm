(import (chibi show) (chibi))

(define <v3> (register-simple-type "<v3>" #f '(x y z)))
(define make-v3 (make-constructor "make-v3" <v3>))
(define (v3-x v) (slot-ref <v3> v 0))
(define (v3-y v) (slot-ref <v3> v 1))
(define (v3-z v) (slot-ref <v3> v 2))
(define (v3-x! v x) (slot-set! <v3> v 0 x))
(define (v3-y! v y) (slot-set! <v3> v 1 y))
(define (v3-z! v z) (slot-set! <v3> v 2 z))
(define v3? (make-type-predicate "v3?" <v3>))
(define (v3 x y z) (let ((v (make-v3))) (v3-x! v x) (v3-y! v y) (v3-z! v z) v))
(define (int x)
	(inexact->exact (round x)))
(define (init frac)
	(define v (v3 1 2 3))
	(define screen-size (ui:screen-size))
	(ui:set-next-window-pos (v3 0 0 0))
	(ui:set-next-window-size (v3 (ui:screen-width) (ui:screen-height) 0))
	(ui:begin "test-chibi")
	(let* ((str "Simulating universe evolution n billion years.")
				 (size (ui:calc-text-size str)))
		(show #t "text size: " (v3-x size) "/" (v3-y size) nl)
		(ui:dummy (v3 (int (/ (- (v3-x screen-size) (v3-x size)) 2)) 0 0))
		(ui:same-line)
		(ui:text str)
		(ui:dummy (v3 15 15 0))
		(ui:dummy (v3 (int (/ (v3-x screen-size) 4)) 0 0))
		(ui:same-line)
		(show #t "fraction: " frac nl)
		(ui:progress-bar frac (v3 (int (/ (v3-x screen-size) 2)) 25 0))
		(ui:end)))

(define (game)
	(show #t (ui:player-max-delta-v) "  " (ui:player-current-delta-v) "  " (ui:player-remaining-delta-v) nl)
	)

(display "Hello from Chibi")
(newline)
