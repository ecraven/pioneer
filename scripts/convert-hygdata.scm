;; INSTRUCTIONS:
;; get hygdata_v3.csv from https://github.com/astronexus/HYG-Database
;; run  mit-scheme --load convert-hygdata.scm
;; paste the following two lines into the repl
;; (define hygdata (read-hygdata-csv "hygdata_v3.csv"))
;; (with-output-to-file "../data/systems/04_hygdata.lua" (lambda () (convert-to-pioneer hygdata)))
;; exit the repl with (%exit 0)

;; mit
(load-option 'string-replace-string)

(define (split-string str delim)
	(burst-string str delim #f))

(define (parsec->ly parsec)
	(* parsec 3.262))

(define-record-type :star
	(make-star id x y z spect absmag proper bf gliese hipparcos henry-draper bright-star con ci)
	star?
	(id star-id)
	(x star-x)
	(y star-y)
	(z star-z)
	(spect star-spect)
	(absmag star-absmag)
	(proper star-proper)
	(bf star-bf)
	(gliese star-gliese)
	(hipparcos star-hipparcos)
	(henry-draper star-henry-draper)
	(bright-star star-bright-star)
	(con star-con)
	(ci star-ci))

(define (make-constellation abbrev nominative genitive)
	(list abbrev nominative genitive))

(define constellations (list (make-constellation "And" "Andromeda" "Andromedae")
														 (make-constellation "Ant" "Antlia" "Antliae")
														 (make-constellation "Aps" "Apus" "Apodis")
														 (make-constellation "Aqr" "Aquarius" "Aquarii")
														 (make-constellation "Aql" "Aquila" "Aquilae")
														 (make-constellation "Ara" "Ara" "Arae")
														 (make-constellation "Ari" "Aries" "Arietis")
														 (make-constellation "Aur" "Auriga" "Aurigae")
														 (make-constellation "Boo" "Boötes" "Boötis")
														 (make-constellation "Cae" "Caelum" "Caeli")
														 (make-constellation "Cam" "Camelopardalis" "Camelopardalis")
														 (make-constellation "Cnc" "Cancer" "Cancri")
														 (make-constellation "CVn" "Canes Venatici" "Canum Venaticorum")
														 (make-constellation "CMa" "Canis Major" "Canis Majoris")
														 (make-constellation "CMi" "Canis Minor" "Canis Minoris")
														 (make-constellation "Cap" "Capricornus" "Capricorni")
														 (make-constellation "Car" "Carina" "Carinae")
														 (make-constellation "Cas" "Cassiopeia" "Cassiopeiae")
														 (make-constellation "Cen" "Centaurus" "Centauri")
														 (make-constellation "Cep" "Cepheus" "Cephei")
														 (make-constellation "Cet" "Cetus" "Ceti")
														 (make-constellation "Cha" "Chamaeleon" "Chamaeleontis")
														 (make-constellation "Cir" "Circinus" "Circini")
														 (make-constellation "Col" "Columba" "Columbae")
														 (make-constellation "Com" "Coma Berenices" "Comae Berenices")
														 (make-constellation "CrA" "Corona Australis" "Coronae Australis")
														 (make-constellation "CrB" "Corona Borealis" "Coronae Borealis")
														 (make-constellation "Crv" "Corvus" "Corvi")
														 (make-constellation "Crt" "Crater" "Crateris")
														 (make-constellation "Cru" "Crux" "Crucis")
														 (make-constellation "Cyg" "Cygnus" "Cygni")
														 (make-constellation "Del" "Delphinus" "Delphini")
														 (make-constellation "Dor" "Dorado" "Doradus")
														 (make-constellation "Dra" "Draco" "Draconis")
														 (make-constellation "Equ" "Equuleus" "Equulei")
														 (make-constellation "Eri" "Eridanus" "Eridani")
														 (make-constellation "For" "Fornax" "Fornacis")
														 (make-constellation "Gem" "Gemini" "Geminorum")
														 (make-constellation "Gru" "Grus" "Gruis")
														 (make-constellation "Her" "Hercules" "Herculis")
														 (make-constellation "Hor" "Horologium" "Horologii")
														 (make-constellation "Hya" "Hydra" "Hydrae")
														 (make-constellation "Hyi" "Hydrus" "Hydri")
														 (make-constellation "Ind" "Indus" "Indi")
														 (make-constellation "Lac" "Lacerta" "Lacertae")
														 (make-constellation "Leo" "Leo" "Leonis")
														 (make-constellation "LMi" "Leo Minor" "Leonis Minoris")
														 (make-constellation "Lep" "Lepus" "Leporis")
														 (make-constellation "Lib" "Libra" "Librae")
														 (make-constellation "Lup" "Lupus" "Lupi")
														 (make-constellation "Lyn" "Lynx" "Lyncis")
														 (make-constellation "Lyr" "Lyra" "Lyrae")
														 (make-constellation "Men" "Mensa" "Mensae")
														 (make-constellation "Mic" "Microscopium" "Microscopii")
														 (make-constellation "Mon" "Monoceros" "Monocerotis")
														 (make-constellation "Mus" "Musca" "Muscae")
														 (make-constellation "Nor" "Norma" "Normae")
														 (make-constellation "Oct" "Octans" "Octantis")
														 (make-constellation "Oph" "Ophiuchus" "Ophiuchi")
														 (make-constellation "Ori" "Orion" "Orionis")
														 (make-constellation "Pav" "Pavo" "Pavonis")
														 (make-constellation "Peg" "Pegasus" "Pegasi")
														 (make-constellation "Per" "Perseus" "Persei")
														 (make-constellation "Phe" "Phoenix" "Phoenicis")
														 (make-constellation "Pic" "Pictor" "Pictoris")
														 (make-constellation "Psc" "Pisces" "Piscium")
														 (make-constellation "PsA" "Piscis Austrinus" "Piscis Austrini")
														 (make-constellation "Pup" "Puppis" "Puppis")
														 (make-constellation "Pyx" "Pyxis" "Pyxidis")
														 (make-constellation "Ret" "Reticulum" "Reticuli")
														 (make-constellation "Sge" "Sagitta" "Sagittae")
														 (make-constellation "Sgr" "Sagittarius" "Sagittarii")
														 (make-constellation "Sco" "Scorpius" "Scorpii")
														 (make-constellation "Scl" "Sculptor" "Sculptoris")
														 (make-constellation "Sct" "Scutum" "Scuti")
														 (make-constellation "Ser" "Serpens" "Serpentis")
														 (make-constellation "Sex" "Sextans" "Sextantis")
														 (make-constellation "Tau" "Taurus" "Tauri")
														 (make-constellation "Tel" "Telescopium" "Telescopii")
														 (make-constellation "Tri" "Triangulum" "Trianguli")
														 (make-constellation "TrA" "Triangulum Australe" "Trianguli Australis")
														 (make-constellation "Tuc" "Tucana" "Tucanae")
														 (make-constellation "UMa" "Ursa Major" "Ursae Majoris")
														 (make-constellation "UMi" "Ursa Minor" "Ursae Minoris")
														 (make-constellation "Vel" "Vela" "Velorum")
														 (make-constellation "Vir" "Virgo" "Virginis")
														 (make-constellation "Vol" "Volans" "Volantis")
														 (make-constellation "Vul" "Vulpecula" "Vulpeculae")))
(define high-numbers (list "⁰" "¹" "²" "³" "⁴" "⁵" "⁶" "⁷" "⁸" "⁹"))

(define greek-letters `(("Alp" "Alpha")
												("Bet" "Beta")
												("Gam" "Gamma")
												("Del" "Delta")
												("Eps" "Epsilon")
												("Zet" "Zeta")
												("Eta" "Eta")
												("The" "Theta")
												("Iot" "Iota")
												("Kap" "Kappa")
												("Lam" "Lambda")
												("Mu" "Mu")
												("Nu" "Nu")
												("Xi" "Xi")
												("Omi" "Omicron")
												("Pi" "Pi")
												("Rho" "Rho")
												("Sig" "Sigma")
												("Tau" "Tau")
												("Ups" "Upsilon")
												("Phi" "Phi")
												("Chi" "Chi")
												("Psi" "Psi")
												("Ome" "Omega")))
;; (define greek-letters `(("Alp" "α")
;; 												("Bet" "β")
;; 												("Gam" "γ")
;; 												("Del" "δ")
;; 												("Eps" "ε")
;; 												("Zet" "ζ")
;; 												("Eta" "η")
;; 												("The" "θ")
;; 												("Iot" "ι")
;; 												("Kap" "κ")
;; 												("Lam" "λ")
;; 												("Mu" "μ")
;; 												("Nu" "ν")
;; 												("Xi" "ξ")
;; 												("Omi" "ο")
;; 												("Pi" "π")
;; 												("Rho" "ρ")
;; 												("Sig" "σ")
;; 												("Tau" "τ")
;; 												("Ups" "υ")
;; 												("Phi" "φ")
;; 												("Chi" "χ")
;; 												("Psi" "ψ")
;; 												("Ome" "ω")))
(define (convert-bayer-flamsteed str)
	(define (do-it number letter-name high-number constellation-name)
		(let ((letter (assoc letter-name greek-letters))
					(constellation (assoc constellation-name constellations)))
			(let ((result (string-append (if number number "")
																	 (if number " " "")
																	 (if letter (cadr letter) (if (string-null? letter-name) "" (error "unknown letter name" str letter-name)))
																	 (if high-number (list-ref high-numbers high-number) "")
																	 (if letter " " "")
																	 (if constellation (caddr constellation) (error "unknown constellation name" str constellation-name)))))
				;;(show #t str " -> " result nl)
				;;(flush-output-port (current-output-port))
				result)))
	(case (string-length str)
		((7) (let* ((letter-name (string-trim (substring str 0 3)))
								(high-number (string->number (substring str 3 4)))
								(constellation-name (string-trim (substring str 4 7))))
					 (do-it #f letter-name high-number constellation-name)))
		((9) (let* ((number (string-trim (substring str 0 2)))
								(letter-name (string-trim (substring str 2 5)))
								(high-number (string->number (substring str 5 6)))
								(constellation-name (string-trim (substring str 6 9))))
					 (do-it number letter-name high-number constellation-name)))
		((8) (let* ((number (string-trim (substring str 0 1)))
								(letter-name (string-trim (substring str 1 4)))
								(high-number (string->number (substring str 4 5)))
								(constellation-name (string-trim (substring str 5 8))))
					 (do-it number letter-name high-number constellation-name)))
		((10) (let* ((number (string-trim (substring str 0 3)))
								 (letter-name (string-trim (substring str 3 6)))
								 (high-number (string->number (substring str 6 7)))
								 (constellation-name (string-trim (substring str 7 10))))
						(do-it number letter-name high-number constellation-name)))
		(else
		 (if (string-null? str)
				 #f
				 (begin
					 (format #t "unhandled: ~s~%")
					 str)))))

(define (read-hygdata-csv filename)
	(with-input-from-file filename
		(lambda ()
			(read-line) ;; headers
			(let loop ((results '())
								 (line (read-line)))
				(if (eof-object? line)
						(reverse results)
						(let ((fields (split-string line #\,)))
							(loop (cons (make-star (string->number (list-ref fields 0))
																		 (parsec->ly (string->number (list-ref fields 17)))
																		 (parsec->ly (string->number (list-ref fields 18)))
																		 (parsec->ly (string->number (list-ref fields 19)))
																		 (list-ref fields 15)
																		 (string->number (list-ref fields 14))
																		 (list-ref fields 6) ; proper name
																		 (list-ref fields 5) ; bayer/flamsteed
																		 (list-ref fields 4) ; gliese
																		 (list-ref fields 1) ; hipparcos
																		 (list-ref fields 2) ; henry draper
																		 (list-ref fields 3) ; harvard revised / yale bright star
																		 (list-ref fields 29) ; constellation
																		 (string->number (list-ref fields 16)) ; colour index
																		 )
													results)
										(read-line))))))))

(define sector-size 8)
(define (->sector n)
	(+ (if (< n 0) -1 0)
		 (exact (quotient (floor n) sector-size))))
(define (->inside-sector n)
	(/ (- n (* sector-size (->sector n))) sector-size))

(define (convert-star-spect s star)
	(call-with-current-continuation
	 (lambda (return)
		 (if (string-null? s)
				 "STAR_G" ;; unknown luminosity, default
				 (let* ((letter (cond ((or (string-prefix? "C" s)
																	 (string-prefix? "R" s) ;; deprecated
																	 (string-prefix? "N" s)	;; deprecated
																	 (string-prefix? "S" s))
															 "G") ;; TODO: carbon star
															((string-prefix? "sd" s) ;; subdwarf
															 (return (convert-star-spect (substring s 2 (string-length s)) star)))
															((string-prefix? "d" s) ;; not sure?
															 (return (convert-star-spect (substring s 1 (string-length s)) star)))
															((or (string-prefix? "DA" s) ;; white dwarf
																	 (string-prefix? "DB" s)
																	 (string-prefix? "DO" s)
																	 (string-prefix? "DQ" s)
																	 (string-prefix? "DZ" s)
																	 (string-prefix? "DC" s)
																	 (string-prefix? "DX" s)
																	 (string-prefix? "DG" s) ;; obsolete
																	 (string-prefix? "DK" s) ;; obsolete
																	 (string-prefix? "DM" s) ;; obsolete
																	 (string-prefix? "DF" s) ;; TODO: is DF actually a white dwarf class?
																	 )
															 (return "WHITE_DWARF"))
															((or (string-prefix? "WC" s)
																	 (string-prefix? "WN" s)
																	 (string-prefix? "WR" s)
																	 (string-prefix? "WO" s))
															 "M_WF") ;; TODO: wolf rayet
															((string-prefix? "M" s)
															 "M")
															((string-prefix? "K" s)
															 "K")
															((string-prefix? "G" s)
															 "G")
															((string-prefix? "F" s)
															 "F")
															((string-prefix? "A" s)
															 "A")
															((string-prefix? "B" s)
															 "B")
															((string-prefix? "O" s)
															 "O")
															((string-prefix? "Q" s)
															 "G") ;; TODO
															((string-prefix? "Z" s)
															 "G") ;; TODO
															((any (lambda (el) (string=? el s))
																		'("pec(NOVA)" "pec" "k-m" "(G3w)F7" "m" "g-k" "m+" "k" "a" "g" "f" "f-g"))
															 "M")
															(else
															 (error "unknown prefix" s star (star-spect star)))))
								(giant (if (string=? "M_WF" letter) "" ;; we don't have Wolf-Rayet Supergiants in pioneer :-/
													 (cond ((string-search-forward "IV" s)
																	"")
																 ((string-search-forward "V" s)
																	"")
																 ((string-search-forward "III" s)
																	"_GIANT")
																 ((string-search-forward "II" s)
																	"_GIANT")
																 ((string-search-forward "Ia+" s)
																	"_HYPER_GIANT")
																 ((string-search-forward "Ia0" s)
																	"_HYPER_GIANT")
																 ((string-search-forward "I" s)
																	"_SUPER_GIANT")
																 (else
																	"")))))
					 (string "STAR_" letter giant))))))

(define (fix-name name)
	(string-replace-string-all name "'" "\\'"))

(define (star-proper-name star)
	(if (not (string-null? (star-proper star)))
			(star-proper star)
			#f))

(define (star-gliese-name star)
	(if (not (string-null? (star-gliese star)))
			(star-gliese star)
			#f))

(define (star-hipparcos-name star)
	(if (not (string-null? (star-hipparcos star)))
			(string-append "H " (star-hipparcos star))
			#f))

(define (star-henry-draper-name star)
	(if (not (string-null? (star-henry-draper star)))
			(string-append "HD " (star-henry-draper star))
			#f))
(define (star-yale-bright-star-name star)
	(if (not (string-null? (star-bright-star star)))
			(string-append "HR " (star-bright-star star))
			#f))

(define (star-name star)
	(or (star-proper-name star)
			(convert-bayer-flamsteed (star-bf star))
			(star-gliese-name star)
			(star-henry-draper-name star)
			(star-yale-bright-star-name star)
			(star-hipparcos-name star)
			(error "no star name" star)))

(define ignore-these-stars '("Sol" "Barnard's Star"))

(define (show-star star)
	(let ((name (star-name star)))
		(when (and name (not (member name ignore-these-stars)))
			(let ((star-type (convert-star-spect (star-spect star) star))
						(sector-x (->sector (star-x star)))
						(sector-y (->sector (star-y star)))
						(sector-z (->sector (star-z star)))
						(x (->inside-sector (star-x star)))
						(y (->inside-sector (star-y star)))
						(z (->inside-sector (star-z star))))
				(format #t (string "CustomSystem:new('" (fix-name name) "',{'" star-type "'}):absmag(" (star-absmag star) "):add_to_sector(" sector-y "," (- sector-x) "," sector-z ",v(" x "," y "," z "))" " -- spectral class: " (star-spect star) "\n"))
				(flush-output)))))

(define (convert-to-pioneer data)
	(for-each show-star
						data))

;;;; unused
;; (define (read-constellations)
;; 	(with-input-from-file "/tmp/bar.txt"
;; 		(lambda ()
;; 			(let loop ((results '())
;; 								 (line (read-line)))
;; 				(if (eof-object? line)
;; 						(reverse results)
;; 						(loop (cons (string-split line #\;) results)
;; 									(read-line)))))))
;; (define (print-constellations)
;; 	(let ((c (read-constellations)))

;; 		`(define constellations
;; 			 (list ,@(map (lambda (constellation)
;; 											(define (access n)
;; 												(string-trim (list-ref constellation n)))
;; 											`(make-constellation ,(access 1) ,(access 0) ,(access 3)))
;; 										c)))))

;; (define bright-stars (with-input-from-file "/tmp/bright-stars.txt"
;; 											 (lambda ()
;; 												 (let loop ((line (read-line))
;; 																		(result '()))
;; 													 (if (eof-object? line)
;; 															 (reverse result)
;; 															 (loop (read-line)
;; 																		 (cons (string-trim line) result)))))))

;; (define names (make-hash-table))
;; (for-each (lambda (star)
;; 						(hash-table/put! names (star-name star) star))
;; 					hygdata)
;; (define (check-names all-names)
;; 	(for-each (lambda (name)
;; 							(unless (hash-table/get names name #f)
;; 								(format #t "not found: ~a~%" name)))
;; 						all-names))
